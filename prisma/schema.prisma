generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id                     String                  @id @default(cuid())
  name                   String?
  email                  String?                 @unique
  emailVerified          DateTime?
  image                  String?
  role                   UserRole                @default(STUDENT)
  bio                    String?
  youtubeConnected       Boolean                 @default(false)
  socialLinks            Json?
  onboarded              Boolean                 @default(false)
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  youtubeChannelId       String?
  youtubeChannelName     String?
  youtubeConnectedAt     DateTime?
  youtubeThumbnailUrl    String?
  gdriveConnected        Boolean                 @default(false)
  gdriveConnectedAt      DateTime?
  gdriveEmail            String?
  gdriveName             String?
  gdriveProfileImage     String?
  dailymotionConnected   Boolean                 @default(false)
  mobileNumber           String?
  accounts               Account[]
  bookmarks              Bookmark[]
  comments               Comment[]
  contents               Content[]
  uploadedResources      CourseResource[]
  creatorProfile         CreatorProfile?
  dailymotionInfo        DailymotionInfo?
  documents              Document[]
  enrollments            Enrollment[]
  eventReminders         EventReminder[]
  createdExams           Exam[]
  lectureLikes           LectureLike[]
  notifications          Notification[]
  payments               Payment[]               @relation("UserPayments")
  progress               Progress[]
  reviews                Review[]
  securityViolations     SecurityViolation[]
  sessions               Session[]
  studentExamResponses   StudentExamResponse[]
  devices                UserDevice[]
  followers              UserFollow[]            @relation("UserFollowers")
  following              UserFollow[]            @relation("UserFollowing")
  userServiceConnections UserServiceConnection[]

  @@index([email])
}

model CreatorProfile {
  id                     String   @id @default(cuid())
  userId                 String   @unique
  customTitle            String?
  tagline                String?
  themeColor             String?  @default("default")
  location               String?
  languages              String[]
  expertise              String[]
  yearsTeaching          String?
  education              String?
  achievements           String?
  institutionName        String?
  institutionDescription String?
  institutionWebsite     String?
  verified               Boolean  @default(false)
  badges                 Json?
  milestones             Json?
  testimonials           Json?
  customSections         Json?
  resources              Json?
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  categories             String[]
  resourcesDescription   String?
  showResources          Boolean  @default(false)
  socialLinks            Json?
  website                String?
  coverImages            String[]
  coverImageIds          String[]
  user                   User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model UserFollow {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  followerId  String
  followingId String
  follower    User     @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("UserFollowing", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model Content {
  id              String           @id @default(cuid())
  title           String
  description     String
  thumbnail       String?
  type            ContentType      @default(COURSE)
  price           Float?           @default(0)
  isPublished     Boolean          @default(false)
  tags            String[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  creatorId       String
  accessDuration  Int?
  courseStatus    CourseStatus?    @default(UPCOMING)
  deliveryMode    DeliveryMode?    @default(VIDEO)
  languages       String[]
  richContent     Json?
  bookmarks       Bookmark[]
  comments        Comment[]
  creator         User             @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  courseResources CourseResource[] @relation("ContentToCourseResource")
  documents       Document[]
  enrollments     Enrollment[]
  exams           Exam[]
  notifications   Notification[]
  payments        Payment[]        @relation("ContentPayments")
  resources       Resource[]
  reviews         Review[]
  sections        Section[]

  @@index([creatorId])
  @@index([type])
  @@index([isPublished])
}

model Section {
  id          String     @id @default(cuid())
  title       String
  description String?
  order       Int
  contentId   String
  documents   Document[]
  exams       Exam[]
  lectures    Lecture[]
  resources   Resource[]
  content     Content    @relation(fields: [contentId], references: [id], onDelete: Cascade)

  @@index([contentId])
}

model Lecture {
  id             String          @id @default(cuid())
  title          String
  description    String?
  order          Int
  type           LectureType     @default(VIDEO)
  videoId        String?
  videoSource    VideoSource?    @default(YOUTUBE)
  claimId        String?
  claimName      String?
  duration       Int?
  isPreview      Boolean         @default(false)
  liveStatus     LiveStatus?
  scheduledAt    DateTime?
  startedAt      DateTime?
  endedAt        DateTime?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  sectionId      String
  streamData     Json?
  metadata       Json?
  secureMetadata Json?
  bookmarks      Bookmark[]
  comments       Comment[]
  documents      Document[]
  eventReminders EventReminder[]
  exams          Exam[]
  section        Section         @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  lectureLikes   LectureLike[]
  progress       Progress[]
  resources      Resource[]

  @@index([sectionId])
  @@index([type])
  @@index([isPreview])
}

model Enrollment {
  id         String           @id @default(cuid())
  userId     String
  contentId  String
  createdAt  DateTime         @default(now())
  paymentId  String?          @unique
  price      Float?
  status     EnrollmentStatus @default(ACTIVE)
  updatedAt  DateTime         @default(now()) @updatedAt
  enrolledAt DateTime         @default(now())
  expiresAt  DateTime?
  content    Content          @relation(fields: [contentId], references: [id], onDelete: Cascade)
  payment    Payment?         @relation(fields: [paymentId], references: [id])
  user       User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, contentId])
  @@index([userId])
  @@index([contentId])
  @@index([enrolledAt])
  @@index([expiresAt])
  @@index([status])
  @@index([userId, status])
}

model Payment {
  id         String        @id @default(cuid())
  orderId    String        @unique
  amount     Float
  currency   String
  status     PaymentStatus @default(PENDING)
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  userId     String
  courseId   String
  enrollment Enrollment?
  course     Content       @relation("ContentPayments", fields: [courseId], references: [id])
  user       User          @relation("UserPayments", fields: [userId], references: [id])

  @@index([userId])
  @@index([courseId])
  @@index([orderId])
}

model Progress {
  id               String   @id @default(cuid())
  percentage       Int      @default(0)
  isComplete       Boolean  @default(false)
  updatedAt        DateTime @updatedAt
  userId           String
  lectureId        String
  timeSpentSeconds Int      @default(0)
  createdAt        DateTime @default(now())
  lecture          Lecture  @relation(fields: [lectureId], references: [id], onDelete: Cascade)
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, lectureId])
  @@index([userId])
  @@index([lectureId])
}

model Comment {
  id        String    @id @default(cuid())
  text      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    String
  contentId String?
  lectureId String?
  parentId  String?
  content   Content?  @relation(fields: [contentId], references: [id], onDelete: Cascade)
  lecture   Lecture?  @relation(fields: [lectureId], references: [id], onDelete: Cascade)
  parent    Comment?  @relation("CommentToComment", fields: [parentId], references: [id], onDelete: Cascade)
  replies   Comment[] @relation("CommentToComment")
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([contentId])
  @@index([lectureId])
  @@index([parentId])
}

model Document {
  id          String   @id @default(cuid())
  title       String
  description String?
  url         String
  type        String
  size        Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  contentId   String?
  sectionId   String?
  lectureId   String?
  creatorId   String
  content     Content? @relation(fields: [contentId], references: [id], onDelete: Cascade)
  creator     User     @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  lecture     Lecture? @relation(fields: [lectureId], references: [id], onDelete: Cascade)
  section     Section? @relation(fields: [sectionId], references: [id], onDelete: Cascade)

  @@index([contentId])
  @@index([sectionId])
  @@index([lectureId])
  @@index([creatorId])
}

model Bookmark {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  contentId String?
  lectureId String?
  content   Content? @relation(fields: [contentId], references: [id], onDelete: Cascade)
  lecture   Lecture? @relation(fields: [lectureId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, contentId])
  @@unique([userId, lectureId])
  @@index([userId])
  @@index([contentId])
  @@index([lectureId])
}

model LectureLike {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  userId    String
  lectureId String
  lecture   Lecture  @relation(fields: [lectureId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, lectureId])
  @@index([userId])
  @@index([lectureId])
}

model Resource {
  id        String   @id @default(cuid())
  fileId    String
  fileName  String
  fileType  String
  fileSize  Int
  fileUrl   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  courseId  String
  sectionId String?
  lectureId String?
  course    Content  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lecture   Lecture? @relation(fields: [lectureId], references: [id], onDelete: Cascade)
  section   Section? @relation(fields: [sectionId], references: [id], onDelete: Cascade)

  @@index([courseId])
  @@index([sectionId])
  @@index([lectureId])
}

model EventReminder {
  id           String    @id @default(cuid())
  createdAt    DateTime  @default(now())
  userId       String
  lectureId    String
  reminderSent Boolean   @default(false)
  sentAt       DateTime?
  lecture      Lecture   @relation(fields: [lectureId], references: [id], onDelete: Cascade)
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, lectureId])
  @@index([userId])
  @@index([lectureId])
  @@index([reminderSent])
}

model Exam {
  id                 String                @id @default(cuid())
  title              String
  description        String?
  instructions       String?
  type               ExamType              @default(QUIZ)
  status             ExamStatus            @default(DRAFT)
  passingScore       Int?
  timeLimit          Int?
  startDate          DateTime?
  endDate            DateTime?
  createdAt          DateTime              @default(now())
  updatedAt          DateTime              @updatedAt
  contentId          String?
  sectionId          String?
  lectureId          String?
  creatorId          String
  formId             String?               @unique
  allowReview        Boolean               @default(true)
  randomizeQuestions Boolean               @default(false)
  content            Content?              @relation(fields: [contentId], references: [id])
  creator            User                  @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  lecture            Lecture?              @relation(fields: [lectureId], references: [id])
  section            Section?              @relation(fields: [sectionId], references: [id])
  questions          Question[]
  studentResponses   StudentExamResponse[]

  @@index([creatorId])
  @@index([contentId])
  @@index([sectionId])
  @@index([lectureId])
  @@index([status])
}

model Question {
  id              String             @id @default(cuid())
  text            String
  type            QuestionType
  required        Boolean            @default(true)
  order           Int
  points          Int                @default(1)
  negativeMarking Float?
  examId          String
  questionId      String
  exam            Exam               @relation(fields: [examId], references: [id], onDelete: Cascade)
  options         QuestionOption[]
  responses       QuestionResponse[]

  @@index([examId])
}

model QuestionOption {
  id         String   @id @default(cuid())
  text       String
  isCorrect  Boolean  @default(false)
  order      Int
  questionId String
  optionId   String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@index([questionId])
}

model StudentExamResponse {
  id         String             @id @default(cuid())
  startTime  DateTime           @default(now())
  submitTime DateTime?
  score      Int?
  maxScore   Int?
  passed     Boolean?
  examId     String
  studentId  String
  responseId String?
  responses  QuestionResponse[]
  exam       Exam               @relation(fields: [examId], references: [id], onDelete: Cascade)
  student    User               @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([examId, studentId])
  @@index([examId])
  @@index([studentId])
}

model QuestionResponse {
  id                    String              @id @default(cuid())
  studentExamResponseId String
  questionId            String
  selectedOptionIds     String[]
  textResponse          String?
  isCorrect             Boolean?
  pointsAwarded         Float?
  question              Question            @relation(fields: [questionId], references: [id], onDelete: Cascade)
  studentExamResponse   StudentExamResponse @relation(fields: [studentExamResponseId], references: [id], onDelete: Cascade)

  @@index([studentExamResponseId])
  @@index([questionId])
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  contentId String
  content   Content  @relation(fields: [contentId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, contentId])
  @@index([userId])
  @@index([contentId])
  @@index([rating])
}

model DailymotionInfo {
  id                String                  @id @default(cuid())
  userId            String                  @unique
  dailymotionUserId String
  username          String?
  screenname        String?
  accessToken       String
  refreshToken      String?
  expiresAt         DateTime
  profilePictureUrl String?
  scope             String?
  connectedAt       DateTime                @default(now())
  updatedAt         DateTime                @updatedAt
  credentials       DailymotionCredentials?
  user              User                    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model DailymotionCredentials {
  id                String          @id @default(cuid())
  dailymotionInfoId String          @unique
  apiKey            String
  apiSecret         String
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  dailymotionInfo   DailymotionInfo @relation(fields: [dailymotionInfoId], references: [id], onDelete: Cascade)

  @@index([dailymotionInfoId])
}

model UserServiceConnection {
  id            String   @id @default(cuid())
  userId        String
  service       String
  isConnected   Boolean  @default(false)
  lastConnected DateTime
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, service])
  @@index([userId])
  @@index([service])
}

model CourseResource {
  id              String          @id @default(cuid())
  title           String
  type            String
  storagePath     String
  storageProvider StorageProvider @default(WASABI)
  url             String?
  sizeInBytes     Int
  courseId        String
  uploadedById    String
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  metadata        Json?
  course          Content         @relation("ContentToCourseResource", fields: [courseId], references: [id], onDelete: Cascade)
  uploadedBy      User            @relation(fields: [uploadedById], references: [id])

  @@index([courseId])
  @@index([uploadedById])
}

model Notification {
  id            String           @id @default(cuid())
  userId        String
  contentId     String
  type          NotificationType
  title         String
  message       String
  read          Boolean          @default(false)
  createdAt     DateTime         @default(now())
  actionUrl     String?
  relatedItemId String?
  content       Content          @relation(fields: [contentId], references: [id], onDelete: Cascade)
  user          User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([contentId])
  @@index([read])
  @@index([createdAt])
}

model UserDevice {
  id              String   @id @default(cuid())
  userId          String
  deviceId        String   @unique
  deviceType      String
  browser         String
  operatingSystem String
  ip              String?
  userAgent       String
  firstLogin      DateTime @default(now())
  lastLogin       DateTime @updatedAt
  isActive        Boolean  @default(true)
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, deviceId])
  @@index([userId])
  @@index([deviceId])
}

model SecurityViolation {
  id            String   @id @default(cuid())
  userId        String
  violationType String
  ipAddress     String?
  userAgent     String?
  details       Json?
  createdAt     DateTime @default(now())
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([ipAddress])
  @@index([violationType])
  @@index([createdAt])
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
  REFUNDED
}

enum UserRole {
  STUDENT
  CREATOR
  ADMIN
}

enum ContentType {
  COURSE
  EVENT
  SHOW
  PODCAST
  PERFORMANCE
}

enum CourseStatus {
  UPCOMING
  ONGOING
  COMPLETED
}

enum DeliveryMode {
  VIDEO
  LIVE
  HYBRID
}

enum LectureType {
  VIDEO
  LIVE
  DOCUMENT
}

enum LiveStatus {
  SCHEDULED
  LIVE
  ENDED
}

enum VideoSource {
  YOUTUBE
  ODYSEE
  WASABI
}

enum EnrollmentStatus {
  ACTIVE
  SUSPENDED
  COMPLETED
  EXPIRED
}

enum ExamType {
  QUIZ
  MCQ
  ASSIGNMENT
  FINAL
}

enum ExamStatus {
  DRAFT
  PUBLISHED
  CLOSED
}

enum QuestionType {
  MULTIPLE_CHOICE
  CHECKBOX
  SHORT_ANSWER
  PARAGRAPH
}

enum StorageProvider {
  LOCAL
  WASABI
  S3
  GDRIVE
}

enum NotificationType {
  LECTURE_ADDED
  RESOURCE_ADDED
  ANNOUNCEMENT
  LIVE_SESSION
  DEADLINE_REMINDER
}
