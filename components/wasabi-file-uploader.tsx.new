'use client';

import { useState, useRef, ChangeEvent } from 'react';
import { useSession } from 'next-auth/react';
import { Button } from '@/components/ui/button';
import { Progress } from '@/components/ui/progress';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { ExclamationTriangleIcon, CheckIcon } from '@radix-ui/react-icons';
import { useWasabiStorage } from '@/hooks/use-wasabi-storage';

interface FileUploadProps {
  category: string;
  onUploadComplete?: (data: {
    url: string;
    key: string;
    filename: string;
    fileType: string;
    fileSize: number;
  }) => void;
  allowedFileTypes?: string[];
  maxSizeMB?: number;
  metadata?: Record<string, string>;
}

export default function WasabiFileUploader({
  category,
  onUploadComplete,
  allowedFileTypes = ['image/*', 'video/*', 'application/pdf'],
  maxSizeMB = 100,
  metadata = {},
}: FileUploadProps) {
  const { data: session } = useSession();
  const [file, setFile] = useState<File | null>(null);
  const [error, setError] = useState<string | null>(null);
  const [success, setSuccess] = useState<string | null>(null);
  const [uploadMethod, setUploadMethod] = useState<'direct' | 'presigned'>('direct');
  const fileInputRef = useRef<HTMLInputElement>(null);
  
  // Use our custom Wasabi storage hook
  const { uploadFile, isUploading, uploadProgress } = useWasabiStorage();

  // Handle file selection
  const handleFileChange = (e: ChangeEvent<HTMLInputElement>) => {
    if (!e.target.files || e.target.files.length === 0) {
      setFile(null);
      return;
    }

    const selectedFile = e.target.files[0];
    
    // Check file size
    if (selectedFile.size > maxSizeMB * 1024 * 1024) {
      setError(`File size exceeds the maximum allowed size of ${maxSizeMB}MB`);
      setFile(null);
      e.target.value = '';
      return;
    }
    
    // Validate file type if specific types are required
    if (allowedFileTypes.length > 0) {
      const fileType = selectedFile.type;
      const isAllowed = allowedFileTypes.some(type => {
        if (type.endsWith('/*')) {
          // Handle wildcard types like 'image/*'
          const baseMimeType = type.split('/')[0];
          return fileType.startsWith(`${baseMimeType}/`);
        }
        return type === fileType;
      });

      if (!isAllowed) {
        setError(`File type not allowed. Please upload: ${allowedFileTypes.join(', ')}`);
        setFile(null);
        e.target.value = '';
        return;
      }
    }
    
    setError(null);
    setSuccess(null);
    setFile(selectedFile);
  };

  // Reset file input
  const resetFileInput = () => {
    if (fileInputRef.current) {
      fileInputRef.current.value = '';
    }
    setFile(null);
    setError(null);
    setSuccess(null);
  };

  // Upload file using our hook
  const handleUpload = async () => {
    if (!file || !session?.user) {
      setError('Please select a file to upload');
      return;
    }

    setError(null);
    setSuccess(null);
    
    try {
      const result = await uploadFile({
        file,
        category,
        metadata,
        usePresignedUrl: uploadMethod === 'presigned',
      });
      
      if (result.success && result.key && result.url) {
        setSuccess(`Successfully uploaded ${file.name}`);
        
        if (onUploadComplete) {
          onUploadComplete({
            url: result.url,
            key: result.key,
            filename: file.name,
            fileType: file.type,
            fileSize: file.size,
          });
        }
        
        // Reset the file input
        setFile(null);
        if (fileInputRef.current) {
          fileInputRef.current.value = '';
        }
      } else {
        setError(result.error || 'Upload failed');
      }
    } catch (err) {
      console.error('Error uploading file:', err);
      setError(err instanceof Error ? err.message : 'An unexpected error occurred');
    }
  };

  if (!session) {
    return <div>Please sign in to upload files</div>;
  }

  return (
    <div className="flex flex-col space-y-4">
      <div className="flex flex-col space-y-2">
        <label htmlFor="file-upload" className="text-sm font-medium">
          Select File
        </label>
        <input
          id="file-upload"
          ref={fileInputRef}
          type="file"
          accept={allowedFileTypes.join(',')}
          onChange={handleFileChange}
          disabled={isUploading}
          className="block w-full text-sm text-gray-900 border border-gray-300 rounded-lg cursor-pointer bg-gray-50 focus:outline-none"
        />
        <p className="text-xs text-gray-500">
          Max file size: {maxSizeMB}MB. Allowed file types: {allowedFileTypes.join(', ')}
        </p>
      </div>

      {file && (
        <div className="flex flex-col space-y-2">
          <p className="text-sm font-medium">Selected file: {file.name}</p>
          <p className="text-xs text-gray-500">
            Size: {(file.size / (1024 * 1024)).toFixed(2)} MB, Type: {file.type}
          </p>
        </div>
      )}

      <div className="flex flex-col space-y-2">
        <label className="text-sm font-medium">Upload Method</label>
        <div className="flex space-x-4">
          <label className="flex items-center space-x-2">
            <input
              type="radio"
              value="direct"
              checked={uploadMethod === 'direct'}
              onChange={() => setUploadMethod('direct')}
              className="form-radio"
              disabled={isUploading}
            />
            <span className="text-sm">Direct Server Upload</span>
          </label>
          <label className="flex items-center space-x-2">
            <input
              type="radio"
              value="presigned"
              checked={uploadMethod === 'presigned'}
              onChange={() => setUploadMethod('presigned')}
              className="form-radio"
              disabled={isUploading}
            />
            <span className="text-sm">Presigned URL (Client Direct)</span>
          </label>
        </div>
      </div>

      {error && (
        <Alert variant="destructive">
          <ExclamationTriangleIcon className="h-4 w-4" />
          <AlertDescription>{error}</AlertDescription>
        </Alert>
      )}
      
      {success && (
        <Alert className="bg-green-50 border-green-200 text-green-800">
          <CheckIcon className="h-4 w-4" />
          <AlertDescription>{success}</AlertDescription>
        </Alert>
      )}

      {isUploading && (
        <div className="space-y-2">
          <Progress value={uploadProgress} />
          <p className="text-sm text-center">Uploading... {uploadProgress}%</p>
        </div>
      )}

      <div className="flex space-x-2">
        <Button
          onClick={handleUpload}
          disabled={!file || isUploading}
          className="flex-1"
        >
          {isUploading ? 'Uploading...' : 'Upload File'}
        </Button>
        <Button
          variant="outline"
          onClick={resetFileInput}
          disabled={isUploading}
        >
          Cancel
        </Button>
      </div>
    </div>
  );
}
